//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> ( "abstract" | "final" | "public" )*
 * f1 -> "class"
 * f2 -> <IDENTIFIER>
 * f3 -> [ "extends" Name() ]
 * f4 -> [ "implements" NameList() ]
 * f5 -> "{"
 * f6 -> ClassBodyDeclaration()
 * f7 -> "}"
 */
public class ClassDeclaration implements Node {
   public NodeListOptional f0;
   public NodeToken f1;
   public NodeToken f2;
   public NodeOptional f3;
   public NodeOptional f4;
   public NodeToken f5;
   public ClassBodyDeclaration f6;
   public NodeToken f7;

   public ClassDeclaration(NodeListOptional n0, NodeToken n1, NodeToken n2, NodeOptional n3, NodeOptional n4, NodeToken n5, ClassBodyDeclaration n6, NodeToken n7) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
   }

   public ClassDeclaration(NodeListOptional n0, NodeToken n1, NodeOptional n2, NodeOptional n3, ClassBodyDeclaration n4) {
      f0 = n0;
      f1 = new NodeToken("class");
      f2 = n1;
      f3 = n2;
      f4 = n3;
      f5 = new NodeToken("{");
      f6 = n4;
      f7 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

