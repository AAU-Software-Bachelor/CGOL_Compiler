//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(JavaParser)
import java.io.IOException;
import syntaxtree.*;
import java.util.Vector;


public class JavaParser 
{
   static void printDebugInfo(String productionName)
   {
   }
   public static void main(String args[])
   {
      JavaParser parser;
      if ( args.length == 0 )
      {
         System.out.println("==========================================================================================================");
         System.out.println("==========================================================================================================");
         System.out.println("Java Parser Version 1.0.2:  Reading from standard input . . .");
         parser = new JavaParser(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("==========================================================================================================");
            System.out.println("==========================================================================================================");
            System.out.println("Java Parser Version 1.0.2:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new JavaParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("Java Parser Version 1.0.2:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("Java Parser Version 1.0.2:  Usage is one of:");
            System.out.println("         java JavaParser < inputfile");
            System.out.println("OR");
            System.out.println("         java JavaParser inputfile");
            return;
         }
      try
      {
         Node root = parser.CompilationUnit();
         MyVisitor v = new MyVisitor();
         root.accept(v);
         v.writeOutputToFile();
         System.out.println("Java Parser Version 1.0.2:  Java program parsed successfully.");
      }
      catch (ParseException e)
      {
         System.out.println("Java Parser Version 1.0.2:  Encountered errors during parse.");
         System.out.println(e.toString());
      }
      catch (IOException e)
      {
         throw new RuntimeException(e);
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(JavaParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <ABSTRACT: "abstract">
   | <BOOLEAN: "boolean">
   | <BREAK: "break">
   | <BYTE: "byte">
   | <CASE: "case">
   | <CATCH: "catch">
   | <CHAR: "char">
   | <CLASS: "class">
   | <CONST: "const">
   | <CONTINUE: "continue">
   | <_DEFAULT: "default">
   | <DO: "do">
   | <DOUBLE: "double">
   | <ELSE: "else">
   | <EXTENDS: "extends">
   | <FALSE: "false">
   | <FINAL: "final">
   | <FINALLY: "finally">
   | <FLOAT: "float">
   | <FOR: "for">
   | <GOTO: "goto">
   | <IF: "if">
   | <IMPLEMENTS: "implements">
   | <IMPORT: "import">
   | <INSTANCEOF: "instanceof">
   | <INT: "int">
   | <INTERFACE: "interface">
   | <LONG: "long">
   | <NATIVE: "native">
   | <NEW: "new">
   | <NULL: "null">
   | <PACKAGE: "package">
   | <PRIVATE: "private">
   | <PROTECTED: "protected">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <SHORT: "short">
   | <STATIC: "static">
   | <SUPER: "super">
   | <SWITCH: "switch">
   | <SYNCHRONIZED: "synchronized">
   | <THIS: "this">
   | <THROW: "throw">
   | <THROWS: "throws">
   | <TRANSIENT: "transient">
   | <TRUE: "true">
   | <TRY: "try">
   | <VOID: "void">
   | <VOLATILE: "volatile">
   | <WHILE: "while">
   | <GET: "get">
   | <SET: "set">
}

TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "'" ((~["'", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))) "'">
   | <STRING_LITERAL: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "\"">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <LBRACKET: "[">
   | <RBRACKET: "]">
   | <SEMICOLON: ";">
   | <COMMA: ",">
   | <DOT: ".">
}

TOKEN :
{
   <ASSIGN: "=">
   | <GT: ">">
   | <LT: "<">
   | <BANG: "!">
   | <TILDE: "~">
   | <HOOK: "?">
   | <COLON: ":">
   | <EQ: "==">
   | <LE: "<=">
   | <GE: ">=">
   | <NE: "!=">
   | <SC_OR: "||">
   | <SC_AND: "&&">
   | <INCR: "++">
   | <DECR: "--">
   | <PLUS: "+">
   | <MINUS: "-">
   | <STAR: "*">
   | <SLASH: "/">
   | <BIT_AND: "&">
   | <BIT_OR: "|">
   | <XOR: "^">
   | <REM: "%">
   | <LSHIFT: "<<">
   | <RSIGNEDSHIFT: ">>">
   | <RUNSIGNEDSHIFT: ">>>">
   | <PLUSASSIGN: "+=">
   | <MINUSASSIGN: "-=">
   | <STARASSIGN: "*=">
   | <SLASHASSIGN: "/=">
   | <ANDASSIGN: "&=">
   | <ORASSIGN: "|=">
   | <XORASSIGN: "^=">
   | <REMASSIGN: "%=">
   | <LSHIFTASSIGN: "<<=">
   | <RSIGNEDSHIFTASSIGN: ">>=">
   | <RUNSIGNEDSHIFTASSIGN: ">>>=">
}

CompilationUnit CompilationUnit() :
{
   NodeListOptional n0 = new NodeListOptional();
   TypeDeclaration n1;
   NodeToken n2;
   Token n3;

   printDebugInfo("CompilationUnit");
}
{
   (
      n1=TypeDeclaration()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new CompilationUnit(n0,n2); }
}

TypeDeclaration TypeDeclaration() :
{
   NodeChoice n0;
   ClassDeclaration n1;
   NodeToken n2;
   Token n3;

   printDebugInfo("TypeDeclaration");
}
{
   (
      LOOKAHEAD(( "abstract" | "final" | "public" )* "class")
      n1=ClassDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n3=";" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new TypeDeclaration(n0); }
}

ClassDeclaration ClassDeclaration() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   Name n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NameList n21;
   NodeToken n22;
   Token n23;
   NodeListOptional n24 = new NodeListOptional();
   ClassBodyDeclaration n25;
   NodeToken n26;
   Token n27;

   printDebugInfo("ClassDeclaration");
}
{
   (
      (
         n3="abstract" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5="final" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7="public" { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      )
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n9="class" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<IDENTIFIER> { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      { n13 = new NodeSequence(2); }
      n15="extends" { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      n16=Name()
      { n13.addNode(n16); }
      { n12.addNode(n13); }
   )?
   (
      { n18 = new NodeSequence(2); }
      n20="implements" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      n21=NameList()
      { n18.addNode(n21); }
      { n17.addNode(n18); }
   )?
   n23="{" { n22 = JTBToolkit.makeNodeToken(n23); }
   (
      n25=ClassBodyDeclaration()
      { n24.addNode(n25); }
   )*
   { n24.nodes.trimToSize(); }
   n27="}" { n26 = JTBToolkit.makeNodeToken(n27); }
   
   { return new ClassDeclaration(n0,n8,n10,n12,n17,n22,n24,n26); }
}

ClassBodyDeclaration ClassBodyDeclaration() :
{
   FieldDeclaration n0;

   printDebugInfo("ClassBodyDeclaration");
}
{
   n0=FieldDeclaration()
   
   { return new ClassBodyDeclaration(n0); }
}

FieldDeclaration FieldDeclaration() :
{
   NodeListOptional n0 = new NodeListOptional();
   field_modifier n1;
   Type n2;
   NodeToken n3;
   Token n4;
   field_body n5;

   printDebugInfo("FieldDeclaration");
}
{
   (
      n1=field_modifier()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n2=Type()
   n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=field_body()
   
   { return new FieldDeclaration(n0,n2,n3,n5); }
}

field_modifier field_modifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   printDebugInfo("field_modifier");
}
{
   (
      n2="new" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="public" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="protected" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="private" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="static" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="abstract" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   )
   
   { return new field_modifier(n0); }
}

field_body field_body() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   accessor_declarations n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   accessor_declarations n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;

   printDebugInfo("field_body");
}
{
   (
      (
         LOOKAHEAD(3)
         { n1 = new NodeSequence(4); }
         n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=Expression()
         { n1.addNode(n4); }
         (
            (
               { n6 = new NodeSequence(3); }
               n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
               { n6.addNode(n7); }
               n9=accessor_declarations()
               { n6.addNode(n9); }
               n11="}" { n10 = JTBToolkit.makeNodeToken(n11); }
               { n6.addNode(n10); }
               { n5 = new NodeChoice(n6, 0); }
            |
               n13=";" { n12 = JTBToolkit.makeNodeToken(n13); }
               { n5 = new NodeChoice(n12, 1); }
            )
            
         )
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n14 = new NodeSequence(3); }
         n16="{" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n17=accessor_declarations()
         { n14.addNode(n17); }
         n19="}" { n18 = JTBToolkit.makeNodeToken(n19); }
         { n14.addNode(n18); }
         { n0 = new NodeChoice(n14, 1); }
      |
         n21=";" { n20 = JTBToolkit.makeNodeToken(n21); }
         { n0 = new NodeChoice(n20, 2); }
      )
      
   )
   
   { return new field_body(n0); }
}

accessor_declarations accessor_declarations() :
{
   NodeChoice n0;
   NodeSequence n1;
   accessor_get_declaration n2;
   NodeOptional n3 = new NodeOptional();
   accessor_set_declaration n4;
   NodeSequence n5;
   accessor_set_declaration n6;
   NodeOptional n7 = new NodeOptional();
   accessor_get_declaration n8;

   printDebugInfo("accessor_declarations");
}
{
   (
      (
         LOOKAHEAD(2)
         { n1 = new NodeSequence(3); }
         n2=accessor_get_declaration()
         { n1.addNode(n2); }
         (
            LOOKAHEAD(2)
            n4=accessor_set_declaration()
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(2)
         { n5 = new NodeSequence(3); }
         n6=accessor_set_declaration()
         { n5.addNode(n6); }
         (
            LOOKAHEAD(2)
            n8=accessor_get_declaration()
            { n7.addNode(n8); }
         )?
         { n5.addNode(n7); }
         { n0 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new accessor_declarations(n0); }
}

accessor_get_declaration accessor_get_declaration() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   printDebugInfo("accessor_get_declaration");
}
{
   (
      (
         n3="private" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5="public" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      )
      { n0.addNode(n1); }
   )?
   n7=<GET> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new accessor_get_declaration(n0,n6,n8); }
}

accessor_set_declaration accessor_set_declaration() :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   printDebugInfo("accessor_set_declaration");
}
{
   (
      (
         n3="private" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5="public" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      )
      { n0.addNode(n1); }
   )?
   n7=<SET> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new accessor_set_declaration(n0,n6,n8); }
}

VariableDeclarator VariableDeclarator() :
{
   VariableDeclaratorId n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   VariableInitializer n5;

   printDebugInfo("VariableDeclarator");
}
{
   n0=VariableDeclaratorId()
   (
      { n2 = new NodeSequence(2); }
      n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=VariableInitializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new VariableDeclarator(n0,n1); }
}

VariableDeclaratorId VariableDeclaratorId() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   printDebugInfo("VariableDeclaratorId");
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="[" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7="]" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new VariableDeclaratorId(n0,n2); }
}

VariableInitializer VariableInitializer() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   VariableInitializer n6;
   NodeListOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   VariableInitializer n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   Expression n17;

   printDebugInfo("VariableInit");
}
{
   (
      { n1 = new NodeSequence(4); }
      n3="{" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         { n7 = new NodeListOptional(); }
         { n5 = new NodeSequence(2); }
         n6=VariableInitializer()
         { n5.addNode(n6); }
         (
            LOOKAHEAD(2)
            { n8 = new NodeSequence(2); }
            n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8.addNode(n9); }
            n11=VariableInitializer()
            { n8.addNode(n11); }
            { n7.addNode(n8); }
         )*
         { n7.nodes.trimToSize(); }
         { n5.addNode(n7); }
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      (
         n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
      )?
      { n1.addNode(n12); }
      n16="}" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n1.addNode(n15); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n17=Expression()
      { n0 = new NodeChoice(n17, 1); }
   )
   
   { return new VariableInitializer(n0); }
}

Type Type() :
{
   NodeChoice n0;
   PrimitiveType n1;
   Name n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      (
         n1=PrimitiveType()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=Name()
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   (
      { n4 = new NodeSequence(2); }
      n6="[" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new Type(n0,n3); }
}

PrimitiveType PrimitiveType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      n2="boolean" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="char" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="byte" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="short" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="int" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="long" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="float" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="double" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
   { return new PrimitiveType(n0); }
}

Name Name() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      { n3 = new NodeSequence(2); }
      n5="." { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new Name(n0,n2); }
}

NameList NameList() :
{
   Name n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   
}
{
   n0=Name()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Name()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new NameList(n0,n1); }
}

Expression Expression() :
{
   Assignment n0;

   printDebugInfo("Expression");
}
{
   LOOKAHEAD(PrimaryExpression() AssignmentOperator())
   n0=Assignment()
   
   { return new Expression(n0); }
}

Assignment Assignment() :
{
   PrimaryExpression n0;
   AssignmentOperator n1;
   Expression n2;

   printDebugInfo("Assignment");
}
{
   n0=PrimaryExpression()
   n1=AssignmentOperator()
   n2=Expression()
   
   { return new Assignment(n0,n1,n2); }
}

AssignmentOperator AssignmentOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;

   
}
{
   (
      n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="*=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="/=" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="%=" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="+=" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="-=" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="<<=" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=">>=" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=">>>=" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="&=" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="^=" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24="|=" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   )
   
   { return new AssignmentOperator(n0); }
}

PrimaryExpression PrimaryExpression() :
{
   PrimaryPrefix n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimarySuffix n2;

   
}
{
   n0=PrimaryPrefix()
   (
      n2=PrimarySuffix()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new PrimaryExpression(n0,n1); }
}

PrimaryPrefix PrimaryPrefix() :
{
   NodeChoice n0;
   Literal n1;
   Name n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Expression n15;
   NodeToken n16;
   Token n17;
   AllocationExpression n18;

   
}
{
   (
      n1=Literal()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Name()
      { n0 = new NodeChoice(n2, 1); }
   |
      n4="this" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 2); }
   |
      { n5 = new NodeSequence(3); }
      n7="super" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9="." { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      n11=<IDENTIFIER> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n5.addNode(n10); }
      { n0 = new NodeChoice(n5, 3); }
   |
      { n12 = new NodeSequence(3); }
      n14="(" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=Expression()
      { n12.addNode(n15); }
      n17=")" { n16 = JTBToolkit.makeNodeToken(n17); }
      { n12.addNode(n16); }
      { n0 = new NodeChoice(n12, 4); }
   |
      n18=AllocationExpression()
      { n0 = new NodeChoice(n18, 5); }
   )
   
   { return new PrimaryPrefix(n0); }
}

PrimarySuffix PrimarySuffix() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Arguments n12;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Expression()
      { n1.addNode(n4); }
      n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n7 = new NodeSequence(2); }
      n9="." { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n11=<IDENTIFIER> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n7.addNode(n10); }
      { n0 = new NodeChoice(n7, 1); }
   |
      n12=Arguments()
      { n0 = new NodeChoice(n12, 2); }
   )
   
   { return new PrimarySuffix(n0); }
}

Literal Literal() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   BooleanLiteral n9;
   NullLiteral n10;

   
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOATING_POINT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<CHARACTER_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<STRING_LITERAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n9=BooleanLiteral()
      { n0 = new NodeChoice(n9, 4); }
   |
      n10=NullLiteral()
      { n0 = new NodeChoice(n10, 5); }
   )
   
   { return new Literal(n0); }
}

BooleanLiteral BooleanLiteral() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2="true" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="false" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new BooleanLiteral(n0); }
}

NullLiteral NullLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="null" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NullLiteral(n0); }
}

Arguments Arguments() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ArgumentList n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=ArgumentList()
      { n2.addNode(n3); }
   )?
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Arguments(n0,n2,n4); }
}

ArgumentList ArgumentList() :
{
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;

   
}
{
   n0=Expression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArgumentList(n0,n1); }
}

AllocationExpression AllocationExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimitiveType n4;
   ArrayDimensions n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Name n9;
   NodeChoice n10;
   Arguments n11;
   ArrayDimensions n12;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(4); }
      n3="new" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=PrimitiveType()
      { n1.addNode(n4); }
      n5=ArrayDimensions()
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n6 = new NodeSequence(3); }
      n8="new" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Name()
      { n6.addNode(n9); }
      (
         (
            n11=Arguments()
            { n10 = new NodeChoice(n11, 0); }
         |
            n12=ArrayDimensions()
            { n10 = new NodeChoice(n12, 1); }
         )
         
      )
      { n6.addNode(n10); }
      { n0 = new NodeChoice(n6, 1); }
   )
   
   { return new AllocationExpression(n0); }
}

ArrayDimensions ArrayDimensions() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(3); }
      n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Expression()
      { n1.addNode(n4); }
      n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   (
      LOOKAHEAD(2)
      { n8 = new NodeSequence(2); }
      n10="[" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n12="]" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n8.addNode(n11); }
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   
   { return new ArrayDimensions(n0,n7); }
}
