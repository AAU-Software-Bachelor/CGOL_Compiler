/* JavaParser.java */
/* Generated By:JavaCC: Do not edit this line. JavaParser.java */
import visitor.MyVisitor;
import java.io.IOException;
import syntaxtree.*;
import java.util.Vector;


public class JavaParser implements JavaParserConstants {
   static void printDebugInfo(String productionName)
   {
   }
   public static void main(String args[])
   {
      JavaParser parser;
      if ( args.length == 0 )
      {
         System.out.println("==========================================================================================================");
         System.out.println("==========================================================================================================");
         System.out.println("Java Parser Version 1.0.2:  Reading from standard input . . .");
         parser = new JavaParser(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("==========================================================================================================");
            System.out.println("==========================================================================================================");
            System.out.println("Java Parser Version 1.0.2:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new JavaParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("Java Parser Version 1.0.2:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("Java Parser Version 1.0.2:  Usage is one of:");
            System.out.println("         java JavaParser < inputfile");
            System.out.println("OR");
            System.out.println("         java JavaParser inputfile");
            return;
         }
      try
      {
         Node root = parser.CompilationUnit();
         MyVisitor v = new MyVisitor();
         root.accept(v);
         v.writeOutputToFile();
         System.out.println("Java Parser Version 1.0.2:  Java program parsed successfully.");
      }
      catch (ParseException e)
      {
         System.out.println("Java Parser Version 1.0.2:  Encountered errors during parse.");
         System.out.println(e.toString());
      }
      catch (IOException e)
      {
         throw new RuntimeException(e);
      }
   }

  static final public CompilationUnit CompilationUnit() throws ParseException {NodeListOptional n0 = new NodeListOptional();
   TypeDeclaration n1;
   NodeToken n2;
   Token n3;

   printDebugInfo("CompilationUnit");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case PUBLIC:
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = TypeDeclaration();
n0.addNode(n1);
    }
n0.nodes.trimToSize();
    n3 = jj_consume_token(0);
n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
{if ("" != null) return new CompilationUnit(n0,n2);}
    throw new Error("Missing return statement in function");
}

  static final public TypeDeclaration TypeDeclaration() throws ParseException {NodeChoice n0;
   ClassDeclaration n1;
   NodeToken n2;
   Token n3;

   printDebugInfo("TypeDeclaration");
    if (jj_2_1(2147483647)) {
      n1 = ClassDeclaration();
n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        n3 = jj_consume_token(SEMICOLON);
n2 = JTBToolkit.makeNodeToken(n3);
n0 = new NodeChoice(n2, 1);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return new TypeDeclaration(n0);}
    throw new Error("Missing return statement in function");
}

  static final public ClassDeclaration ClassDeclaration() throws ParseException {NodeListOptional n0 = new NodeListOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   Name n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NameList n21;
   NodeToken n22;
   Token n23;
   NodeListOptional n24 = new NodeListOptional();
   ClassBodyDeclaration n25;
   NodeToken n26;
   Token n27;

   printDebugInfo("ClassDeclaration");
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case PUBLIC:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:{
        n3 = jj_consume_token(ABSTRACT);
n2 = JTBToolkit.makeNodeToken(n3);
n1 = new NodeChoice(n2, 0);
        break;
        }
      case FINAL:{
        n5 = jj_consume_token(FINAL);
n4 = JTBToolkit.makeNodeToken(n5);
n1 = new NodeChoice(n4, 1);
        break;
        }
      case PUBLIC:{
        n7 = jj_consume_token(PUBLIC);
n6 = JTBToolkit.makeNodeToken(n7);
n1 = new NodeChoice(n6, 2);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n0.addNode(n1);
    }
n0.nodes.trimToSize();
    n9 = jj_consume_token(CLASS);
n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(IDENTIFIER);
n10 = JTBToolkit.makeNodeToken(n11);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
n13 = new NodeSequence(2);
      n15 = jj_consume_token(EXTENDS);
n14 = JTBToolkit.makeNodeToken(n15);
n13.addNode(n14);
      n16 = Name();
n13.addNode(n16);
n12.addNode(n13);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPLEMENTS:{
n18 = new NodeSequence(2);
      n20 = jj_consume_token(IMPLEMENTS);
n19 = JTBToolkit.makeNodeToken(n20);
n18.addNode(n19);
      n21 = NameList();
n18.addNode(n21);
n17.addNode(n18);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    n23 = jj_consume_token(LBRACE);
n22 = JTBToolkit.makeNodeToken(n23);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      n25 = ClassBodyDeclaration();
n24.addNode(n25);
    }
n24.nodes.trimToSize();
    n27 = jj_consume_token(RBRACE);
n26 = JTBToolkit.makeNodeToken(n27);
{if ("" != null) return new ClassDeclaration(n0,n8,n10,n12,n17,n22,n24,n26);}
    throw new Error("Missing return statement in function");
}

  static final public ClassBodyDeclaration ClassBodyDeclaration() throws ParseException {FieldDeclaration n0;

   printDebugInfo("ClassBodyDeclaration");
    n0 = FieldDeclaration();
{if ("" != null) return new ClassBodyDeclaration(n0);}
    throw new Error("Missing return statement in function");
}

  static final public FieldDeclaration FieldDeclaration() throws ParseException {NodeListOptional n0 = new NodeListOptional();
   field_modifier n1;
   Type n2;
   NodeToken n3;
   Token n4;
   field_body n5;

   printDebugInfo("FieldDeclaration");
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      n1 = field_modifier();
n0.addNode(n1);
    }
n0.nodes.trimToSize();
    n2 = Type();
    n4 = jj_consume_token(IDENTIFIER);
n3 = JTBToolkit.makeNodeToken(n4);
    n5 = field_body();
{if ("" != null) return new FieldDeclaration(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
}

  static final public field_modifier field_modifier() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   printDebugInfo("field_modifier");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:{
      n2 = jj_consume_token(NEW);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case PUBLIC:{
      n4 = jj_consume_token(PUBLIC);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    case PROTECTED:{
      n6 = jj_consume_token(PROTECTED);
n5 = JTBToolkit.makeNodeToken(n6);
n0 = new NodeChoice(n5, 2);
      break;
      }
    case PRIVATE:{
      n8 = jj_consume_token(PRIVATE);
n7 = JTBToolkit.makeNodeToken(n8);
n0 = new NodeChoice(n7, 3);
      break;
      }
    case STATIC:{
      n10 = jj_consume_token(STATIC);
n9 = JTBToolkit.makeNodeToken(n10);
n0 = new NodeChoice(n9, 4);
      break;
      }
    case ABSTRACT:{
      n12 = jj_consume_token(ABSTRACT);
n11 = JTBToolkit.makeNodeToken(n12);
n0 = new NodeChoice(n11, 5);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new field_modifier(n0);}
    throw new Error("Missing return statement in function");
}

  static final public field_body field_body() throws ParseException {NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   accessor_declarations n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   accessor_declarations n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;

   printDebugInfo("field_body");
    if (jj_2_2(3)) {
n1 = new NodeSequence(4);
      n3 = jj_consume_token(ASSIGN);
n2 = JTBToolkit.makeNodeToken(n3);
n1.addNode(n2);
      n4 = Expression();
n1.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
n6 = new NodeSequence(3);
        n8 = jj_consume_token(LBRACE);
n7 = JTBToolkit.makeNodeToken(n8);
n6.addNode(n7);
        n9 = accessor_declarations();
n6.addNode(n9);
        n11 = jj_consume_token(RBRACE);
n10 = JTBToolkit.makeNodeToken(n11);
n6.addNode(n10);
n5 = new NodeChoice(n6, 0);
        break;
        }
      case SEMICOLON:{
        n13 = jj_consume_token(SEMICOLON);
n12 = JTBToolkit.makeNodeToken(n13);
n5 = new NodeChoice(n12, 1);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n1.addNode(n5);
n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
n14 = new NodeSequence(3);
        n16 = jj_consume_token(LBRACE);
n15 = JTBToolkit.makeNodeToken(n16);
n14.addNode(n15);
        n17 = accessor_declarations();
n14.addNode(n17);
        n19 = jj_consume_token(RBRACE);
n18 = JTBToolkit.makeNodeToken(n19);
n14.addNode(n18);
n0 = new NodeChoice(n14, 1);
        break;
        }
      case SEMICOLON:{
        n21 = jj_consume_token(SEMICOLON);
n20 = JTBToolkit.makeNodeToken(n21);
n0 = new NodeChoice(n20, 2);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return new field_body(n0);}
    throw new Error("Missing return statement in function");
}

  static final public accessor_declarations accessor_declarations() throws ParseException {NodeChoice n0;
   NodeSequence n1;
   accessor_get_declaration n2;
   NodeOptional n3 = new NodeOptional();
   accessor_set_declaration n4;
   NodeSequence n5;
   accessor_set_declaration n6;
   NodeOptional n7 = new NodeOptional();
   accessor_get_declaration n8;

   printDebugInfo("accessor_declarations");
    if (jj_2_5(2)) {
n1 = new NodeSequence(3);
      n2 = accessor_get_declaration();
n1.addNode(n2);
      if (jj_2_3(2)) {
        n4 = accessor_set_declaration();
n3.addNode(n4);
      } else {
        ;
      }
n1.addNode(n3);
n0 = new NodeChoice(n1, 0);
    } else if (jj_2_6(2)) {
n5 = new NodeSequence(3);
      n6 = accessor_set_declaration();
n5.addNode(n6);
      if (jj_2_4(2)) {
        n8 = accessor_get_declaration();
n7.addNode(n8);
      } else {
        ;
      }
n5.addNode(n7);
n0 = new NodeChoice(n5, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new accessor_declarations(n0);}
    throw new Error("Missing return statement in function");
}

  static final public accessor_get_declaration accessor_get_declaration() throws ParseException {NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   printDebugInfo("accessor_get_declaration");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIVATE:
    case PUBLIC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRIVATE:{
        n3 = jj_consume_token(PRIVATE);
n2 = JTBToolkit.makeNodeToken(n3);
n1 = new NodeChoice(n2, 0);
        break;
        }
      case PUBLIC:{
        n5 = jj_consume_token(PUBLIC);
n4 = JTBToolkit.makeNodeToken(n5);
n1 = new NodeChoice(n4, 1);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    n7 = jj_consume_token(GET);
n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(SEMICOLON);
n8 = JTBToolkit.makeNodeToken(n9);
{if ("" != null) return new accessor_get_declaration(n0,n6,n8);}
    throw new Error("Missing return statement in function");
}

  static final public accessor_set_declaration accessor_set_declaration() throws ParseException {NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   printDebugInfo("accessor_set_declaration");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIVATE:
    case PUBLIC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRIVATE:{
        n3 = jj_consume_token(PRIVATE);
n2 = JTBToolkit.makeNodeToken(n3);
n1 = new NodeChoice(n2, 0);
        break;
        }
      case PUBLIC:{
        n5 = jj_consume_token(PUBLIC);
n4 = JTBToolkit.makeNodeToken(n5);
n1 = new NodeChoice(n4, 1);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    n7 = jj_consume_token(SET);
n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(SEMICOLON);
n8 = JTBToolkit.makeNodeToken(n9);
{if ("" != null) return new accessor_set_declaration(n0,n6,n8);}
    throw new Error("Missing return statement in function");
}

  static final public VariableDeclarator VariableDeclarator() throws ParseException {VariableDeclaratorId n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   VariableInitializer n5;

   printDebugInfo("VariableDeclarator");
    n0 = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
n2 = new NodeSequence(2);
      n4 = jj_consume_token(ASSIGN);
n3 = JTBToolkit.makeNodeToken(n4);
n2.addNode(n3);
      n5 = VariableInitializer();
n2.addNode(n5);
n1.addNode(n2);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
{if ("" != null) return new VariableDeclarator(n0,n1);}
    throw new Error("Missing return statement in function");
}

  static final public VariableDeclaratorId VariableDeclaratorId() throws ParseException {NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   printDebugInfo("VariableDeclaratorId");
    n1 = jj_consume_token(IDENTIFIER);
n0 = JTBToolkit.makeNodeToken(n1);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
n3 = new NodeSequence(2);
      n5 = jj_consume_token(LBRACKET);
n4 = JTBToolkit.makeNodeToken(n5);
n3.addNode(n4);
      n7 = jj_consume_token(RBRACKET);
n6 = JTBToolkit.makeNodeToken(n7);
n3.addNode(n6);
n2.addNode(n3);
    }
n2.nodes.trimToSize();
{if ("" != null) return new VariableDeclaratorId(n0,n2);}
    throw new Error("Missing return statement in function");
}

  static final public VariableInitializer VariableInitializer() throws ParseException {NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   VariableInitializer n6;
   NodeListOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   VariableInitializer n11;
   NodeOptional n12 = new NodeOptional();
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   Expression n17;

   printDebugInfo("VariableInit");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
n1 = new NodeSequence(4);
      n3 = jj_consume_token(LBRACE);
n2 = JTBToolkit.makeNodeToken(n3);
n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:{
n7 = new NodeListOptional();
n5 = new NodeSequence(2);
        n6 = VariableInitializer();
n5.addNode(n6);
        label_6:
        while (true) {
          if (jj_2_7(2)) {
            ;
          } else {
            break label_6;
          }
n8 = new NodeSequence(2);
          n10 = jj_consume_token(COMMA);
n9 = JTBToolkit.makeNodeToken(n10);
n8.addNode(n9);
          n11 = VariableInitializer();
n8.addNode(n11);
n7.addNode(n8);
        }
n7.nodes.trimToSize();
n5.addNode(n7);
n4.addNode(n5);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
n1.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        n14 = jj_consume_token(COMMA);
n13 = JTBToolkit.makeNodeToken(n14);
n12.addNode(n13);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
n1.addNode(n12);
      n16 = jj_consume_token(RBRACE);
n15 = JTBToolkit.makeNodeToken(n16);
n1.addNode(n15);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:{
      n17 = Expression();
n0 = new NodeChoice(n17, 1);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new VariableInitializer(n0);}
    throw new Error("Missing return statement in function");
}

  static final public Type Type() throws ParseException {NodeChoice n0;
   PrimitiveType n1;
   Name n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:{
      n1 = PrimitiveType();
n0 = new NodeChoice(n1, 0);
      break;
      }
    case IDENTIFIER:{
      n2 = Name();
n0 = new NodeChoice(n2, 1);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
n4 = new NodeSequence(2);
      n6 = jj_consume_token(LBRACKET);
n5 = JTBToolkit.makeNodeToken(n6);
n4.addNode(n5);
      n8 = jj_consume_token(RBRACKET);
n7 = JTBToolkit.makeNodeToken(n8);
n4.addNode(n7);
n3.addNode(n4);
    }
n3.nodes.trimToSize();
{if ("" != null) return new Type(n0,n3);}
    throw new Error("Missing return statement in function");
}

  static final public PrimitiveType PrimitiveType() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOLEAN:{
      n2 = jj_consume_token(BOOLEAN);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case CHAR:{
      n4 = jj_consume_token(CHAR);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    case BYTE:{
      n6 = jj_consume_token(BYTE);
n5 = JTBToolkit.makeNodeToken(n6);
n0 = new NodeChoice(n5, 2);
      break;
      }
    case SHORT:{
      n8 = jj_consume_token(SHORT);
n7 = JTBToolkit.makeNodeToken(n8);
n0 = new NodeChoice(n7, 3);
      break;
      }
    case INT:{
      n10 = jj_consume_token(INT);
n9 = JTBToolkit.makeNodeToken(n10);
n0 = new NodeChoice(n9, 4);
      break;
      }
    case LONG:{
      n12 = jj_consume_token(LONG);
n11 = JTBToolkit.makeNodeToken(n12);
n0 = new NodeChoice(n11, 5);
      break;
      }
    case FLOAT:{
      n14 = jj_consume_token(FLOAT);
n13 = JTBToolkit.makeNodeToken(n14);
n0 = new NodeChoice(n13, 6);
      break;
      }
    case DOUBLE:{
      n16 = jj_consume_token(DOUBLE);
n15 = JTBToolkit.makeNodeToken(n16);
n0 = new NodeChoice(n15, 7);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new PrimitiveType(n0);}
    throw new Error("Missing return statement in function");
}

  static final public Name Name() throws ParseException {NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
n0 = JTBToolkit.makeNodeToken(n1);
    label_8:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_8;
      }
n3 = new NodeSequence(2);
      n5 = jj_consume_token(DOT);
n4 = JTBToolkit.makeNodeToken(n5);
n3.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
n6 = JTBToolkit.makeNodeToken(n7);
n3.addNode(n6);
n2.addNode(n3);
    }
n2.nodes.trimToSize();
{if ("" != null) return new Name(n0,n2);}
    throw new Error("Missing return statement in function");
}

  static final public NameList NameList() throws ParseException {Name n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;
    n0 = Name();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
n3 = JTBToolkit.makeNodeToken(n4);
n2.addNode(n3);
      n5 = Name();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
{if ("" != null) return new NameList(n0,n1);}
    throw new Error("Missing return statement in function");
}

  static final public Expression Expression() throws ParseException {Assignment n0;

   printDebugInfo("Expression");
    if (jj_2_9(2147483647)) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n0 = Assignment();
{if ("" != null) return new Expression(n0);}
    throw new Error("Missing return statement in function");
}

  static final public Assignment Assignment() throws ParseException {PrimaryExpression n0;
   AssignmentOperator n1;
   Expression n2;

   printDebugInfo("Assignment");
    n0 = PrimaryExpression();
    n1 = AssignmentOperator();
    n2 = Expression();
{if ("" != null) return new Assignment(n0,n1,n2);}
    throw new Error("Missing return statement in function");
}

  static final public AssignmentOperator AssignmentOperator() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      n2 = jj_consume_token(ASSIGN);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case STARASSIGN:{
      n4 = jj_consume_token(STARASSIGN);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    case SLASHASSIGN:{
      n6 = jj_consume_token(SLASHASSIGN);
n5 = JTBToolkit.makeNodeToken(n6);
n0 = new NodeChoice(n5, 2);
      break;
      }
    case REMASSIGN:{
      n8 = jj_consume_token(REMASSIGN);
n7 = JTBToolkit.makeNodeToken(n8);
n0 = new NodeChoice(n7, 3);
      break;
      }
    case PLUSASSIGN:{
      n10 = jj_consume_token(PLUSASSIGN);
n9 = JTBToolkit.makeNodeToken(n10);
n0 = new NodeChoice(n9, 4);
      break;
      }
    case MINUSASSIGN:{
      n12 = jj_consume_token(MINUSASSIGN);
n11 = JTBToolkit.makeNodeToken(n12);
n0 = new NodeChoice(n11, 5);
      break;
      }
    case LSHIFTASSIGN:{
      n14 = jj_consume_token(LSHIFTASSIGN);
n13 = JTBToolkit.makeNodeToken(n14);
n0 = new NodeChoice(n13, 6);
      break;
      }
    case RSIGNEDSHIFTASSIGN:{
      n16 = jj_consume_token(RSIGNEDSHIFTASSIGN);
n15 = JTBToolkit.makeNodeToken(n16);
n0 = new NodeChoice(n15, 7);
      break;
      }
    case RUNSIGNEDSHIFTASSIGN:{
      n18 = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
n17 = JTBToolkit.makeNodeToken(n18);
n0 = new NodeChoice(n17, 8);
      break;
      }
    case ANDASSIGN:{
      n20 = jj_consume_token(ANDASSIGN);
n19 = JTBToolkit.makeNodeToken(n20);
n0 = new NodeChoice(n19, 9);
      break;
      }
    case XORASSIGN:{
      n22 = jj_consume_token(XORASSIGN);
n21 = JTBToolkit.makeNodeToken(n22);
n0 = new NodeChoice(n21, 10);
      break;
      }
    case ORASSIGN:{
      n24 = jj_consume_token(ORASSIGN);
n23 = JTBToolkit.makeNodeToken(n24);
n0 = new NodeChoice(n23, 11);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new AssignmentOperator(n0);}
    throw new Error("Missing return statement in function");
}

  static final public PrimaryExpression PrimaryExpression() throws ParseException {PrimaryPrefix n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimarySuffix n2;
    n0 = PrimaryPrefix();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      n2 = PrimarySuffix();
n1.addNode(n2);
    }
n1.nodes.trimToSize();
{if ("" != null) return new PrimaryExpression(n0,n1);}
    throw new Error("Missing return statement in function");
}

  static final public PrimaryPrefix PrimaryPrefix() throws ParseException {NodeChoice n0;
   Literal n1;
   Name n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Expression n15;
   NodeToken n16;
   Token n17;
   AllocationExpression n18;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:{
      n1 = Literal();
n0 = new NodeChoice(n1, 0);
      break;
      }
    case IDENTIFIER:{
      n2 = Name();
n0 = new NodeChoice(n2, 1);
      break;
      }
    case THIS:{
      n4 = jj_consume_token(THIS);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 2);
      break;
      }
    case SUPER:{
n5 = new NodeSequence(3);
      n7 = jj_consume_token(SUPER);
n6 = JTBToolkit.makeNodeToken(n7);
n5.addNode(n6);
      n9 = jj_consume_token(DOT);
n8 = JTBToolkit.makeNodeToken(n9);
n5.addNode(n8);
      n11 = jj_consume_token(IDENTIFIER);
n10 = JTBToolkit.makeNodeToken(n11);
n5.addNode(n10);
n0 = new NodeChoice(n5, 3);
      break;
      }
    case LPAREN:{
n12 = new NodeSequence(3);
      n14 = jj_consume_token(LPAREN);
n13 = JTBToolkit.makeNodeToken(n14);
n12.addNode(n13);
      n15 = Expression();
n12.addNode(n15);
      n17 = jj_consume_token(RPAREN);
n16 = JTBToolkit.makeNodeToken(n17);
n12.addNode(n16);
n0 = new NodeChoice(n12, 4);
      break;
      }
    case NEW:{
      n18 = AllocationExpression();
n0 = new NodeChoice(n18, 5);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new PrimaryPrefix(n0);}
    throw new Error("Missing return statement in function");
}

  static final public PrimarySuffix PrimarySuffix() throws ParseException {NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Arguments n12;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
n1 = new NodeSequence(3);
      n3 = jj_consume_token(LBRACKET);
n2 = JTBToolkit.makeNodeToken(n3);
n1.addNode(n2);
      n4 = Expression();
n1.addNode(n4);
      n6 = jj_consume_token(RBRACKET);
n5 = JTBToolkit.makeNodeToken(n6);
n1.addNode(n5);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case DOT:{
n7 = new NodeSequence(2);
      n9 = jj_consume_token(DOT);
n8 = JTBToolkit.makeNodeToken(n9);
n7.addNode(n8);
      n11 = jj_consume_token(IDENTIFIER);
n10 = JTBToolkit.makeNodeToken(n11);
n7.addNode(n10);
n0 = new NodeChoice(n7, 1);
      break;
      }
    case LPAREN:{
      n12 = Arguments();
n0 = new NodeChoice(n12, 2);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new PrimarySuffix(n0);}
    throw new Error("Missing return statement in function");
}

  static final public Literal Literal() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   BooleanLiteral n9;
   NullLiteral n10;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      n2 = jj_consume_token(INTEGER_LITERAL);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      n4 = jj_consume_token(FLOATING_POINT_LITERAL);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    case CHARACTER_LITERAL:{
      n6 = jj_consume_token(CHARACTER_LITERAL);
n5 = JTBToolkit.makeNodeToken(n6);
n0 = new NodeChoice(n5, 2);
      break;
      }
    case STRING_LITERAL:{
      n8 = jj_consume_token(STRING_LITERAL);
n7 = JTBToolkit.makeNodeToken(n8);
n0 = new NodeChoice(n7, 3);
      break;
      }
    case FALSE:
    case TRUE:{
      n9 = BooleanLiteral();
n0 = new NodeChoice(n9, 4);
      break;
      }
    case NULL:{
      n10 = NullLiteral();
n0 = new NodeChoice(n10, 5);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Literal(n0);}
    throw new Error("Missing return statement in function");
}

  static final public BooleanLiteral BooleanLiteral() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      n2 = jj_consume_token(TRUE);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case FALSE:{
      n4 = jj_consume_token(FALSE);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new BooleanLiteral(n0);}
    throw new Error("Missing return statement in function");
}

  static final public NullLiteral NullLiteral() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NULL);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new NullLiteral(n0);}
    throw new Error("Missing return statement in function");
}

  static final public Arguments Arguments() throws ParseException {NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ArgumentList n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LPAREN);
n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:{
      n3 = ArgumentList();
n2.addNode(n3);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    n5 = jj_consume_token(RPAREN);
n4 = JTBToolkit.makeNodeToken(n5);
{if ("" != null) return new Arguments(n0,n2,n4);}
    throw new Error("Missing return statement in function");
}

  static final public ArgumentList ArgumentList() throws ParseException {Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
    n0 = Expression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_11;
      }
n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
n3 = JTBToolkit.makeNodeToken(n4);
n2.addNode(n3);
      n5 = Expression();
n2.addNode(n5);
n1.addNode(n2);
    }
n1.nodes.trimToSize();
{if ("" != null) return new ArgumentList(n0,n1);}
    throw new Error("Missing return statement in function");
}

  static final public AllocationExpression AllocationExpression() throws ParseException {NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimitiveType n4;
   ArrayDimensions n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Name n9;
   NodeChoice n10;
   Arguments n11;
   ArrayDimensions n12;
    if (jj_2_10(2)) {
n1 = new NodeSequence(4);
      n3 = jj_consume_token(NEW);
n2 = JTBToolkit.makeNodeToken(n3);
n1.addNode(n2);
      n4 = PrimitiveType();
n1.addNode(n4);
      n5 = ArrayDimensions();
n1.addNode(n5);
n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:{
n6 = new NodeSequence(3);
        n8 = jj_consume_token(NEW);
n7 = JTBToolkit.makeNodeToken(n8);
n6.addNode(n7);
        n9 = Name();
n6.addNode(n9);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          n11 = Arguments();
n10 = new NodeChoice(n11, 0);
          break;
          }
        case LBRACKET:{
          n12 = ArrayDimensions();
n10 = new NodeChoice(n12, 1);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
n6.addNode(n10);
n0 = new NodeChoice(n6, 1);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return new AllocationExpression(n0);}
    throw new Error("Missing return statement in function");
}

  static final public ArrayDimensions ArrayDimensions() throws ParseException {NodeList n0 = new NodeList();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
    label_12:
    while (true) {
n1 = new NodeSequence(3);
      n3 = jj_consume_token(LBRACKET);
n2 = JTBToolkit.makeNodeToken(n3);
n1.addNode(n2);
      n4 = Expression();
n1.addNode(n4);
      n6 = jj_consume_token(RBRACKET);
n5 = JTBToolkit.makeNodeToken(n6);
n1.addNode(n5);
n0.addNode(n1);
      if (jj_2_11(2)) {
        ;
      } else {
        break label_12;
      }
    }
n0.nodes.trimToSize();
    label_13:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_13;
      }
n8 = new NodeSequence(2);
      n10 = jj_consume_token(LBRACKET);
n9 = JTBToolkit.makeNodeToken(n10);
n8.addNode(n9);
      n12 = jj_consume_token(RBRACKET);
n11 = JTBToolkit.makeNodeToken(n12);
n8.addNode(n11);
n7.addNode(n8);
    }
n7.nodes.trimToSize();
{if ("" != null) return new ArrayDimensions(n0,n7);}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_3R_AssignmentOperator_947_7_46()
 {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_944_7_45()
 {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_accessor_get_declaration_565_4_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_accessor_get_declaration_566_7_23()) jj_scanpos = xsp;
    if (jj_scan_token(GET)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_941_7_44()
 {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_Literal_1130_7_72()
 {
    if (jj_3R_NullLiteral_1167_4_76()) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_938_7_43()
 {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_Literal_1127_7_71()
 {
    if (jj_3R_BooleanLiteral_1148_4_75()) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_935_7_42()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_Literal_1124_7_70()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_934_4_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AssignmentOperator_935_7_42()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_938_7_43()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_941_7_44()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_944_7_45()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_947_7_46()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_950_7_47()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_953_7_48()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_956_7_49()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_959_7_50()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_962_7_51()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_965_7_52()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentOperator_968_7_53()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Literal_1121_7_69()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_Literal_1118_7_68()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_accessor_get_declaration_565_4_17()) return true;
    return false;
  }

  static private boolean jj_3R_Literal_1115_7_67()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_Literal_1114_4_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Literal_1115_7_67()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_1118_7_68()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_1121_7_69()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_1124_7_70()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_1127_7_71()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_1130_7_72()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_accessor_set_declaration_597_4_16()) return true;
    return false;
  }

  static private boolean jj_3R_VariableInitializer_722_7_25()
 {
    if (jj_3R_Expression_881_4_15()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_accessor_set_declaration_597_4_16()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_881_4_15()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_accessor_get_declaration_565_4_17()) return true;
    return false;
  }

  static private boolean jj_3R_PrimarySuffix_1090_7_66()
 {
    if (jj_3R_Arguments_1184_4_74()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_VariableInitializer_690_4_18()) return true;
    return false;
  }

  static private boolean jj_3R_Assignment_896_4_21()
 {
    if (jj_3R_PrimaryExpression_984_4_34()) return true;
    if (jj_3R_AssignmentOperator_934_4_35()) return true;
    return false;
  }

  static private boolean jj_3R_PrimarySuffix_1083_7_65()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_Expression_881_14_20()
 {
    return false;
  }

  static private boolean jj_3R_PrimarySuffix_1074_7_64()
 {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_VariableInitializer_691_7_24()
 {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_PrimarySuffix_1073_4_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimarySuffix_1074_7_64()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimarySuffix_1083_7_65()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimarySuffix_1090_7_66()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_VariableInitializer_690_4_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableInitializer_691_7_24()) {
    jj_scanpos = xsp;
    if (jj_3R_VariableInitializer_722_7_25()) return true;
    }
    return false;
  }

  static private boolean jj_3R_Expression_881_4_15()
 {
    if (jj_3R_Expression_881_14_20()) return true;
    if (jj_3R_Assignment_896_4_21()) return true;
    return false;
  }

  static private boolean jj_3R_AllocationExpression_1250_7_73()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_Name_833_4_62()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_PrimitiveType_790_4_19()) return true;
    return false;
  }

  static private boolean jj_3R_PrimaryPrefix_1047_7_59()
 {
    if (jj_3R_AllocationExpression_1239_4_63()) return true;
    return false;
  }

  static private boolean jj_3R_AllocationExpression_1239_4_63()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_AllocationExpression_1250_7_73()) return true;
    }
    return false;
  }

  static private boolean jj_3R_null_263_19_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PrimaryPrefix_1038_7_58()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_881_4_15()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_null_263_19_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_Expression_881_4_15()) return true;
    return false;
  }

  static private boolean jj_3R_PrimaryPrefix_1029_7_57()
 {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_PrimaryPrefix_1026_7_56()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_PrimaryPrefix_1023_7_55()
 {
    if (jj_3R_Name_833_4_62()) return true;
    return false;
  }

  static private boolean jj_3R_Name_833_4_62()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_PrimaryPrefix_1020_7_54()
 {
    if (jj_3R_Literal_1114_4_61()) return true;
    return false;
  }

  static private boolean jj_3R_PrimaryPrefix_1019_4_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryPrefix_1020_7_54()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1023_7_55()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1026_7_56()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1029_7_57()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1038_7_58()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1047_7_59()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PrimitiveType_812_7_33()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_PrimitiveType_809_7_32()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_PrimitiveType_806_7_31()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static private boolean jj_3R_PrimitiveType_803_7_30()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_PrimitiveType_800_7_29()
 {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  static private boolean jj_3R_Arguments_1184_4_74()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PrimitiveType_797_7_28()
 {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  static private boolean jj_3R_accessor_set_declaration_602_10_37()
 {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_986_7_41()
 {
    if (jj_3R_PrimarySuffix_1073_4_60()) return true;
    return false;
  }

  static private boolean jj_3R_PrimitiveType_794_7_27()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_accessor_set_declaration_599_10_36()
 {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  static private boolean jj_3R_PrimitiveType_791_7_26()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_PrimaryExpression_984_4_34()
 {
    if (jj_3R_PrimaryPrefix_1019_4_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PrimaryExpression_986_7_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_accessor_set_declaration_598_7_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_accessor_set_declaration_599_10_36()) {
    jj_scanpos = xsp;
    if (jj_3R_accessor_set_declaration_602_10_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PrimitiveType_790_4_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimitiveType_791_7_26()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_794_7_27()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_797_7_28()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_800_7_29()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_803_7_30()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_806_7_31()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_809_7_32()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimitiveType_812_7_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_accessor_set_declaration_597_4_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_accessor_set_declaration_598_7_22()) jj_scanpos = xsp;
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_NullLiteral_1167_4_76()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_968_7_53()
 {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_965_7_52()
 {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_962_7_51()
 {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_BooleanLiteral_1152_7_78()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_959_7_50()
 {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_BooleanLiteral_1149_7_77()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_956_7_49()
 {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_accessor_get_declaration_570_10_39()
 {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  static private boolean jj_3R_BooleanLiteral_1148_4_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BooleanLiteral_1149_7_77()) {
    jj_scanpos = xsp;
    if (jj_3R_BooleanLiteral_1152_7_78()) return true;
    }
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_953_7_48()
 {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_accessor_get_declaration_567_10_38()
 {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  static private boolean jj_3R_AssignmentOperator_950_7_47()
 {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_scan_token(0)) return true;
    return false;
  }

  static private boolean jj_3R_accessor_get_declaration_566_7_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_accessor_get_declaration_567_10_38()) {
    jj_scanpos = xsp;
    if (jj_3R_accessor_get_declaration_570_10_39()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavaParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x2010200,0x0,0x2000200,0x2000200,0x800000,0x80000000,0x8209600,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x1000000,0x8209400,0x0,0x8209400,0x0,0x0,0x0,0x1000000,0x0,0x1000000,0x1000000,0x1000000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x800,0x0,0x800,0x800,0x0,0x0,0x6e54,0x4e40,0x4e40,0x0,0x0,0xa00,0xa00,0xa00,0xa00,0x0,0x0,0x204480c0,0x0,0x204480c0,0x2014,0x0,0x2014,0x0,0x0,0x0,0x204480c0,0x0,0x20400080,0x400000,0x204480c0,0x0,0x0,0x40,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x4000,0x4000,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x4400,0x4400,0x0,0x0,0x0,0x0,0x20000,0x1000,0x53a,0x8000,0x53a,0x20,0x1000,0x0,0x8000,0x20000,0x11100,0x13a,0x11100,0x1a,0x0,0x13a,0x8000,0x1100,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ff800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[12];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new JavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JavaParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaParser(JavaParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 34; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[118];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 34; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 118; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 12; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
