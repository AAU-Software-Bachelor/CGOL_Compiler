// Generated by JTB 1.3.2
// modified in cooporation with ChatGPT



import syntaxtree.*;
import visitor.DepthFirstVisitor;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class MyVisitor extends DepthFirstVisitor {
   private String output;
   private String classBodyOutput = "";
   private String fileName;

   public MyVisitor() {
      output = "";
   }

   private String capitalizeFirstLetter(String input) {
      return input.substring(0, 1).toUpperCase() + input.substring(1);
   }

   public void visit(ClassDeclaration n) {
      fileName = n.f2.toString() + ".java";

      output += "package outputs;\n\n";
      output += ((NodeChoice) n.f0.nodes.get(0)).choice.toString() + " ";
      output += n.f1.toString() + " ";
      output += n.f2.toString() + " ";
      output += n.f5.toString() + "\n";

      n.f6.accept(this);
      output += n.f7.toString();

      try {
         writeOutputToFile();
      } catch (IOException e) {
         e.printStackTrace();
      }
   }

   public void visit(FieldDeclaration n) {
      classBodyOutput = "";
      classBodyOutput += ((field_modifier) n.f0.nodes.get(0)).f0.choice + " ";
      classBodyOutput += ((Name) n.f1.f0.choice).f0 + " ";
      classBodyOutput += n.f2.toString() + " ";
      n.f3.accept(this);
      output += classBodyOutput;
   }

   public void visit(field_body n) {
      if (n.f0.which == 0 || n.f0.which == 1) {
         NodeSequence seq = (NodeSequence) n.f0.choice;
         accessor_declarations accDeclarations = (accessor_declarations) seq.elementAt(1);
         accDeclarations.accept(this);
      } else {
         classBodyOutput += ";\n";
      }
   }

   public void visit(accessor_declarations n) {
      String getter = "";
      String setter = "";

      NodeChoice choice = n.f0;
      switch (choice.which) {
         case 0:
            accessor_get_declaration getDecl = (accessor_get_declaration) ((NodeSequence) choice.choice).elementAt(0);
            getter = "public " + classBodyOutput.trim().split(" ")[1] + " get" + capitalizeFirstLetter(getDecl.f1.toString()) + "() { return " + getDecl.f1.toString() + "; }\n";
            break;
         case 1:
            accessor_set_declaration setDecl = (accessor_set_declaration) ((NodeSequence) choice.choice).elementAt(0);
            setter = "public void set" + capitalizeFirstLetter(setDecl.f1.toString()) + "(" + classBodyOutput.trim().split(" ")[1] + " value) { this." + setDecl.f1.toString() + " = value; }\n";
            break;
      }

      classBodyOutput += "{\n" + getter + setter + "}\n";
   }

   public void writeOutputToFile() throws IOException {
      Files.write(Paths.get("outputs/" + fileName), output.getBytes());
   }
}
