// Generated by JTB 1.3.2
// modified in cooporation with ChatGPT



import syntaxtree.*;
import visitor.DepthFirstVisitor;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Vector;

public class MyVisitor extends DepthFirstVisitor {
   private String output;
   private String fileName;

   public MyVisitor() {
      output = "";
   }

   private String capitalizeFirstLetter(String input) {
      return input.substring(0, 1).toUpperCase() + input.substring(1);
   }

   public void visit(ClassDeclaration n) {
      fileName = n.f2.toString() + ".java";

      output += "package outputs;\n\n";
      output += ((NodeChoice) n.f0.nodes.get(0)).choice.toString() + " ";
      output += n.f1.toString() + " ";
      output += n.f2.toString() + " ";
      output += n.f5.toString() + "\n";

      n.f6.accept(this);
      output += n.f7.toString();

      try {
         writeOutputToFile();
      } catch (IOException e) {
         e.printStackTrace();
      }
   }
   
   public void visit(ClassBodyDeclaration n) {
      Vector<Node> nodes = n.f0.nodes;
      for (Object field : nodes) {
         ((FieldDeclaration)field).accept(this);
      }
   }

   public void visit(FieldDeclaration n) {
      String fieldOutput = ((field_modifier) n.f0.nodes.get(0)).f0.choice + " ";
      fieldOutput += ((Name) n.f1.f0.choice).f0 + " ";
      fieldOutput += n.f2.toString() + ";\n";


      NodeSequence accessors = ((NodeSequence)((accessor_declarations)((NodeSequence)n.f3.f0.choice).nodes.get(1)).f0.choice);

      n.f3.accept(this, accessors);

      /*
      output += fieldOutput;
      if(accessors.nodes.get(0) instanceof accessor_get_declaration || accessors.nodes.get(0) instanceof accessor_set_declaration) {
         getSet((accessors.nodes.get(0)), n.f2.toString(), ((Name) n.f1.f0.choice).f0.toString(), ((field_modifier) n.f0.nodes.get(0)).f0.choice.toString());
      }
      if(((NodeOptional)accessors.nodes.get(1)).node != null) {
         Node a = ((NodeOptional)accessors.nodes.get(1)).node;
         if(a instanceof accessor_get_declaration || a instanceof accessor_set_declaration) {
            getSet(a, n.f2.toString(), ((Name) n.f1.f0.choice).f0.toString(), ((field_modifier) n.f0.nodes.get(0)).f0.choice.toString());
         }
      }

       */
   }

   private void getSet(Node n, String name, String type, String modifier) {
      if(n instanceof accessor_get_declaration) {
         output += modifier +  " " + type  + " get" + capitalizeFirstLetter(name) + "() { return " + name + "; }\n";
      } else {
         output += modifier + " void set" + capitalizeFirstLetter(name) + "(" + type + " input) { " + name + " = input; }\n";
      }

   }

   public void visit() {

   }

   public void visit(field_body n) {
      String fieldOutput = "";
      if (n.f0.which == 0 || n.f0.which == 1) {
         NodeSequence seq = (NodeSequence) n.f0.choice;
         accessor_declarations accDeclarations = (accessor_declarations) seq.elementAt(1);
         accDeclarations.accept(this);
      } else {
         fieldOutput += ";\n";
      }
      output+= fieldOutput;
   }

   public void writeOutputToFile() throws IOException {
      Files.write(Paths.get("outputs/" + fileName), output.getBytes());
   }
}
