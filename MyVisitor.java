// Generated by JTB 1.3.2
// modified in cooporation with ChatGPT



import syntaxtree.*;
import visitor.DepthFirstVisitor;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Vector;

public class MyVisitor extends DepthFirstVisitor {
   private String output;
   private String fileName;

   private FieldDecoration currentField = null;

   private static class FieldDecoration {
      public String name;
      public String type;
      public String defaultAccess;
      public FieldDecoration(String name, String type, String defaultAccess) {
         this.name = name;
         this.type = type;
         this.defaultAccess = defaultAccess;
      }
   }


   public MyVisitor() {
      output = "";
   }

   private String capitalizeFirstLetter(String input) {
      return input.substring(0, 1).toUpperCase() + input.substring(1);
   }

   public void visit(PrimitiveType n) {
      output += n.f0.choice.toString() + " ";
   }

   public void visit(ClassDeclaration n) {
      fileName = n.f2.toString() + ".java";

      output += "package outputs;\n\n";
      output += ((NodeChoice) n.f0.nodes.get(0)).choice.toString() + " ";
      output += n.f1.toString() + " ";
      output += n.f2.toString() + " ";
      output += n.f5.toString() + "\n";

      n.f6.accept(this);
      output += n.f7.toString();

      try {
         writeOutputToFile();
      } catch (IOException e) {
         e.printStackTrace();
      }
   }
   
   public void visit(ClassBodyDeclaration n) {
      //FieldDeclaration works not other
      n.f0.choice.accept(this);


      /*Vector<Node> nodes = n.f0.nodes;
      for (Object field : nodes) {
         ((FieldDeclaration)field).accept(this);
      }*/
   }

   public void visit(FieldDeclaration n) {
      String fieldOutput = "";

      n.f0.nodes.get(0).accept(this);
      String access = ((field_modifier) n.f0.nodes.get(0)).f0.choice + " ";


      Node choice = n.f1.f0.choice; // get the node choice
      String type;
      if (choice instanceof PrimitiveType) {
          type = ((PrimitiveType) choice).f0.choice.toString();
      } else if (choice instanceof Name) {
          type = ((Name) choice).f0.toString();
      } else {
          throw new Error("Unexpected node type for field type: " + choice.getClass());
      }


      String name = n.f2.toString();
      fieldOutput += name + ";\n";

      output += fieldOutput;

      currentField = new FieldDecoration(name, type, access);
      n.f3.accept(this);
   }

   public void visit(Name n) {
      output += n.f0.toString() + " ";
   }

   public void visit(field_modifier n) {
      output += n.f0.choice + " ";
   }

   public void visit(accessor_declarations n) {
      if(currentField == null) throw new Error("CurrentField Empty");
      Vector<Node> nodes = ((NodeSequence)n.f0.choice).nodes;
      for (Node node: nodes) {
         if(node instanceof NodeOptional && ((NodeOptional)node).node != null) {
            ((NodeOptional)node).node.accept(this);
         } else {
            node.accept(this);
         }
      }
      currentField = null;
   }
   public void visit(accessor_get_declaration n) {
      String access = currentField.defaultAccess;
      if(n.f0.node != null) {
         access = ((NodeChoice)n.f0.node).choice.toString();
      }
      output += access +  " " + currentField.type  + " get" + capitalizeFirstLetter(currentField.name) + "() { return " + currentField.name + "; }\n";
   }

   public void visit(accessor_set_declaration n) {
      String access = currentField.defaultAccess;
      if(n.f0.node != null) {
         access = ((NodeChoice)n.f0.node).choice.toString();
      }
      output += access + " void set" + capitalizeFirstLetter(currentField.name) + "(" + currentField.type + " input) { " + currentField.name + " = input; }\n";
   }

   public void visit(field_body n) {
      if (n.f0.which == 0 || n.f0.which == 1) {
         NodeSequence seq = (NodeSequence) n.f0.choice;
         accessor_declarations accDeclarations = (accessor_declarations) seq.elementAt(1);
         accDeclarations.accept(this);
      }
   }

   public void writeOutputToFile() throws IOException {
      Files.write(Paths.get("outputs/" + fileName), output.getBytes());
   }
}
